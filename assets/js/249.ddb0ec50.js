(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{594:function(t,e,l){"use strict";l.r(e);var r=l(42),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h3",{attrs:{id:"构建过程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#构建过程"}},[t._v("#")]),t._v(" 构建过程")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。")])]),t._v(" "),l("li",[l("p",[t._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。")])]),t._v(" "),l("li",[l("p",[t._v("确定入口：根据配置中的 entry 找出所有的入口文件。")])]),t._v(" "),l("li",[l("p",[t._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。")])]),t._v(" "),l("li",[l("p",[t._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。")])]),t._v(" "),l("li",[l("p",[t._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会。")])]),t._v(" "),l("li",[l("p",[t._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{395:function(n,e,t){"use strict";t.r(e);var v=t(42),o=Object(v.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面"}},[n._v("#")]),n._v(" 面")]),n._v(" "),t("p",[n._v("5个问题\n1、css 尽可能多的说出你能想到的所有的无宽高的块级元素水平垂直居中的方法")]),n._v(" "),t("p",[n._v('2、如何判断一个数据类型是对象\nObject.propertype.toString().call(obj) === "[object,object]"')]),n._v(" "),t("p",[n._v("3、说说你对"),t("code",[n._v("AMD")]),n._v("和"),t("code",[n._v("CommonJS")]),n._v("的了解\n它们都是实现模块体系的方式，直到"),t("code",[n._v("ES2015")]),n._v("出现之前，"),t("code",[n._v("JavaScript")]),n._v(" 一直没有模块体系。\n"),t("code",[n._v("CommonJS")]),n._v(" 是同步的，而 "),t("code",[n._v("AMD（Asynchronous Module Definition）")]),n._v("从全称中可以明显看出是异步的。\n"),t("code",[n._v("CommonJS")]),n._v(" 的设计是为服务器端开发考虑的，而"),t("code",[n._v("AMD")]),n._v("支持异步加载模块，更适合浏览器。")]),n._v(" "),t("p",[n._v("我发现"),t("code",[n._v("AMD")]),n._v("的语法非常冗长，"),t("code",[n._v("CommonJS")]),n._v("更接近其他语言"),t("code",[n._v("import")]),n._v(" 声明语句的用法习惯。\n大多数情况下，我认为"),t("code",[n._v("AMD")]),n._v("没有使用的必要，因为如果把所有 "),t("code",[n._v("JavaScript")]),n._v(" 都捆绑进一个文件中，\n将无法得到异步加载的好处。\n此外，"),t("code",[n._v("CommonJS 语法上更接近 Node 编写模块的风格，在前后端都使用 JavaScript")]),n._v("开发之间进行切换时，\n语境的切换开销较小。")]),n._v(" "),t("p",[n._v("我很高兴看到"),t("code",[n._v("ES2015")]),n._v(" 的模块加载方案同时支持同步和异步，我们终于可以只使用一种方案了。\n虽然它尚未在浏览器和"),t("code",[n._v("Node")]),n._v("中完全推出，但是我们可以使用代码转换工具进行转换。")]),n._v(" "),t("p",[n._v("4、浏览器从输入一个网址到页面加载出来经历了哪些过程\n5、说说vue的生命周期顺序何执行顺序\n6、vue兄弟组件之间的传值几种方式\n6、vue 的设计模式和 双向绑定")]),n._v(" "),t("p",[n._v("属性的遍历")]),n._v(" "),t("p",[n._v("ES6一共有5种方法可以遍历对象的属性。")]),n._v(" "),t("p",[n._v("（1）for...in")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("     for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。\n")])])]),t("p",[n._v("（2）Object.keys(obj)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("     Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不 含Symbol属性）的键名。\n")])])]),t("p",[n._v("（3）Object.getOwnPrototypeNames(obj)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("      Object.getOwnPrototypeNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）的键名。\n")])])]),t("p",[n._v("（4） Object.getOwnPropertySymbols(obj)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。\n\n（5）Reflect.ownKeys(obj)\n\n\n\n  Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。\n")])])]),t("p",[n._v("以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。")]),n._v(" "),t("p",[n._v("首先遍历所有数值键，按照数值升序排列。\n其次遍历所有字符串键，按照加入时间升序排列。\n最后遍历所有 Symbol 键，按照加入时间升序排列。")]),n._v(" "),t("p",[n._v("杨振宇：\n1、css 尽可能多的说出你能想到的所有的无宽高的块级元素水平垂直居中的方法\n2、数组的常用方法有哪些 slice splice splice能够用来做哪些事情\n3、git reset 和git revert\n4、for in 和for of\n5、DOCTYPE是“document type”的缩写。它是 HTML 中用来区分标准模式和怪异模式的声明，用来告知浏览器使用标准模式渲染页面。\n从中获得的启发：在页面开始处添加"),t("code",[n._v("<!DOCTYPE html>")]),n._v("即可。\n6、浏览器从输入url到页面完全加载出来 整个过程。")]),n._v(" "),t("p",[n._v("李平\n1、vue的生命周期  以及每个周期内做了哪些事情\n2、px rem em之间的换算关系\n3、bfc\n4、vue 组件 prop methonds data computed watch\nprops - > methods - > data - > computed - > watch\n父组件向子组件通过props传值，props是一个只读属性，如果要改变props的值，需要在data中进行定义，所以props在前，data在后\ncomputed计算属性要使用data里面的数据，所以data在前，computed在后\n5、跨域的一般几种方式\n6、你使用什么语句遍历对象的属性和数组的元素？\n7、vue的双向绑定 是如何实现的")]),n._v(" "),t("p",[n._v("1、王骄阳\n1、写的项目经验是实习的 还是在校项目\n2、最近半年什么工作\n3、vue的生命周期  以及每个周期内做了哪些事情\n4、模块化和组件化\nv-router钩子函数理解\n5css 盒模型")]),n._v(" "),t("p",[n._v("姜凯文\n1、\n王锦涛\nEcharts的使用 动态")]),n._v(" "),t("p",[n._v("唐欢\niE10的兼容")]),n._v(" "),t("p",[n._v("项景涛\n1、vue使用情况")]),n._v(" "),t("p",[n._v("1、朱晨凯\n0、看你简历上说有做过浏览器兼容性问题的处理，能简单的说一下吗？\n针对IE8以上的浏览器你是如何做兼容的\n1、简要的说一下es6中新增了哪些常用的方法或者特性\n变量定义：let Const\n解构赋值\n扩展运算符\nSymbol数据类型\nSet 和 Map 数据结构\nPromise\nClass\n箭头函数\nProxy拦截\nimoprt模块导入\n新增了一些数组的方法（find for of  map  forEach reduce（数组）\n汇总–求和–多个变成一个）\n新增了一些对象的方法()\nforEach()方法不会返回执行结果，而是undefined。\n也就是说，forEach()会修改原来的数组。\n而map()方法会得到一个新的数组并返回。\n2、你再项目中 一般你碰到跨域问题都是如何解决的？\n3、vue兄弟组件之间的传值方式？\n4、简要的描述vue从模板渲染成页面的整个过程?")]),n._v(" "),t("p",[n._v("王丽娜\n1、块级元素css垂直居中的方式\n2、keep-alive 什么情况下会失效\n孙浩楠\n2、 http请求如何缓存数据"),t("br"),n._v("\n1.Cache-Control\n请求/响应头，缓存控制字段，可以说是控制http缓存的最高指令，要不要缓存也是它说了算。\n1.1 no-store：所有内容都不缓存\n　　1.2 no-cache：缓存，但是浏览器使用缓存前，都会请求服务器判断缓存资源是否是最新，它是个比较高贵的存在，因为它只用不过期的缓存。\n　　1.3  max-age=x(单位秒) 请求缓存后的X秒不再发起请求，属于http1.1属性，与下方Expires(http1.0属性)类似，但优先级要比Expires高。\n　　1.4 s-maxage=x(单位秒) 代理服务器请求源站缓存后的X秒不再发起请求，只对CDN缓存有效(这个在后面会细说)\n　　1.5 public 客户端和代理服务器(CDN)都可缓存\n　　1.6 private 只有客户端可以缓存\n2.Expires\n响应头，代表资源过期时间，由服务器返回提供，GMT格式日期，是http1.0的属性，在与max-age(http1.1)共存的情况下，优先级要低。\n3.Last-Modified\n响应头，资源最新修改时间，由服务器告诉浏览器。\n4.if-Modified-Since\n请求头，资源最新修改时间，由浏览器告诉服务器(其实就是上次服务器给的Last-Modified，请求又还给服务器对比)，和Last-Modified是一对，它两会进行对比。\n5.Etag\n响应头，资源标识，由服务器告诉浏览器。\n6.if-None-Match\n请求头，缓存资源标识，由浏览器告诉服务器(其实就是上次服务器给的Etag)，和Etag是一对，它两会进行对比。")]),n._v(" "),t("p",[n._v("3、package.json里的参数  从头到尾解释一下  package.json里的包分为两种 基础和拓展\n4、websocket（socket.io 库）")]),n._v(" "),t("p",[n._v("七、vue如何实现按需加载配合webpack设置")]),n._v(" "),t("p",[n._v("蒋根原\n1、px  rpx换算\nurl  从输入到页面展示整个过程")]),n._v(" "),t("p",[n._v("1、路由的两种方式\n2、浏览器同源策略")]),n._v(" "),t("p",[n._v("3、怎样形成块级格式化上下文\n2、px  换算")]),n._v(" "),t("p",[n._v("vue-router传值\nvue自定义指令\nVue.directive('mycolor',{\ninserted (el,binding) {\n//这里我使用了binding，所以要在使用到的组件\n//内部，定义一个color,才能显示\nel.style.color = binding.value;\n}\n})")]),n._v(" "),t("p",[n._v('vue 插槽  具名插槽如何使用  子组件定义插槽名称name  父组件用template v-slot定义插槽放的位置\n3.作用域插槽   v-bind:user="user"  父组件如何使用插槽内的值 我们可以将 user 作为 '),n._t("default",[n._v(" 元素的一个 attribute 绑定上去：")])],2)])}),[],!1,null,null,null);e.default=o.exports}}]);
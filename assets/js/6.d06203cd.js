(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{352:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"结构伪类选择器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构伪类选择器"}},[t._v("#")]),t._v(" 结构伪类选择器")]),t._v(" "),a("p",[t._v("对于一段html代码")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("class1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("class2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("#对应css\n p.class1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("text-align")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("p.class2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("text-align")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("其中的class1和class2为html中的两自定义的类，这个类内部的内容是我们自己手动去添加的 这被称为css的类，但是在css中还存在一些类是事先已经定义好的名称不可修改的类，这些类被叫做伪类，而伪类选择器并不是针对真正的元素使用的选择器，而是针对css中已经定义好的伪类使用的选择器。")]),t._v(" "),a("h2",{attrs:{id:"认识结构伪类选择器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识结构伪类选择器"}},[t._v("#")]),t._v(" 认识结构伪类选择器")]),t._v(" "),a("p",[t._v("结构伪类是css3新设计的选择器，它利用文档结构实现元素过滤，通过文档结构相互的关系去匹配特定的一个或者一组元素。")]),t._v(" "),a("p",[t._v("首先我们先定义一个已知元素E  下面我们一一了解伪类\n"),a("b",[t._v("E:root")]),t._v("\n选择E元素的根节点，在html中毋庸置疑结果选择的就是根元素html 此时相当于 html {}\n"),a("b",[t._v("E:nth-child(n)")]),t._v("\n定义：选择所有在其父元素中第n个位置的匹配E的子元素。\n理解：E的父元素的子元素中第n个和E相同的元素\n关键字n可以是数字，可以是关键字（odd,even）和公式（2n, 2n+3）, 索引的起始值是1")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("tr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匹配所有表格里排第三行的tr元素")]),t._v("\ntr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2n")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配所有表格的奇数行")]),t._v("\ntr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配所有表格里偶数行")]),t._v("\ntr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("odd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配所有表格里奇数行")]),t._v("\ntr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nth"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("child")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配所有表格里偶数行")]),t._v("\n")])])]),a("p",[a("b",[t._v("E:nth-last-child")]),t._v(" "),a("b",[t._v("E:nth-of-type")]),t._v(" "),a("b",[t._v("E:nth-last-of-type(n)")]),t._v(" "),a("b",[t._v("E:last-child")]),t._v(" "),a("b",[t._v("E:first-of-type")]),t._v(" "),a("b",[t._v("E:last-of-type")]),t._v(" "),a("b",[t._v("E:only-child")]),t._v(" "),a("b",[t._v("E:only-of-type")]),t._v(" "),a("b",[t._v("E:empty")])])])}),[],!1,null,null,null);s.default=e.exports}}]);
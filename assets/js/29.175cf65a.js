(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{376:function(v,_,l){"use strict";l.r(_);var t=l(42),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h3",{attrs:{id:"从输入-url-到显示都发生了什么"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#从输入-url-到显示都发生了什么"}},[v._v("#")]),v._v(" 从输入 "),l("code",[v._v("url")]),v._v(" 到显示都发生了什么 ？")]),v._v(" "),l("h3",{attrs:{id:"大致描述"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#大致描述"}},[v._v("#")]),v._v(" 大致描述")]),v._v(" "),l("ul",[l("li",[v._v("首先，浏览器进程接收到用户输入的URL请求，浏览器进程便将改URL转发给网络进程。")]),v._v(" "),l("li",[v._v("在网络进程中发起真正的URL请求。")]),v._v(" "),l("li",[v._v("接着网络进程接收到响应头数据之后，发送“提交导航”消息到渲染进程。")]),v._v(" "),l("li",[v._v("渲染进程接收到“提交导航”的消息之后，便开始准备接受HTML数据，接受数据的方式是直接和网络进程简历数据管道。")]),v._v(" "),l("li",[v._v("最后渲染进程会想浏览器进程“确认提交”，这是告诉浏览器进程：已经准备好接受和解析页面数据了。")]),v._v(" "),l("li",[v._v("浏览器进程接受到渲染进程“提交文档”的消息之后，便开始移除之前旧的文档，然后更新浏览器进程中的页面状态。")])]),v._v(" "),l("h3",{attrs:{id:"详细过程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#详细过程"}},[v._v("#")]),v._v(" 详细过程")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("1.地址栏会判断用户输入的关键字是搜索内容还是请求的URL")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("如果是搜索内容，地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的URL")])]),v._v(" "),l("li",[l("p",[v._v("如果判断输入内容符合URL规则，那么地址栏会根据规则，把这段内容和加上协议，合成完整的URL， 比如 \bhttps://music.hdove.top")])])])]),v._v(" "),l("li",[l("p",[v._v("2.浏览器通过进程间通讯 IPC 把url请求发送给网络进程")])]),v._v(" "),l("li",[l("p",[v._v("3.网络进程收到url之后会检查本地是否缓存了该请求资源，如果有则直接使用缓存返回给浏览器进程。")])]),v._v(" "),l("li",[l("p",[v._v("4.如果没有，网络进程向web服务器发起http请求，请求流程如下")]),v._v(" "),l("ul",[l("li",[v._v("进行DNS解析，获取服务器IP地址，端口。")]),v._v(" "),l("li",[v._v("利用IP地址和目标服务器进行tcp连接")]),v._v(" "),l("li",[v._v("构建请求头信息")]),v._v(" "),l("li",[v._v("发送请求头信息")]),v._v(" "),l("li",[v._v("服务器响应之后，网络进程接受响应头和响应信息，并解析响应内容")])])]),v._v(" "),l("li",[l("p",[v._v("5.网络进程解析响应流程")]),v._v(" "),l("ul",[l("li",[v._v("检查状态码，如果是301、302，则需要重定向，从Location中自动读取地址，重新进行第三步，如果是200，则继续处理请求。")]),v._v(" "),l("li",[v._v("200响应处理\n"),l("ul",[l("li",[v._v("检查响应类型（Content-type），如果是字节流类型，则将该请求提交给下载管理器，改导航流程结束，不再进行， 如果是HTML则通知浏览器进程准备进行渲染")])])])])]),v._v(" "),l("li",[l("p",[v._v("6.准备渲染进程")]),v._v(" "),l("ul",[l("li",[v._v("浏览器进程检查当前url是否和之前打开的渲染进程根域名是否相同，如果相同，则复用之前的渲染进程，如果不同，则开启新的进程。")]),v._v(" "),l("li",[v._v("通常情况下，打开新的页面都会使用单独的渲染进程")]),v._v(" "),l("li",[v._v("如果从A页面打开B页面，且A和B属于同一站点的话，那么B页面复用A页面的渲染进程。如果是其他情况，浏览器进程会为B页面开启一个渲染进程。")]),v._v(" "),l("li",[v._v("(同一站点：根域名和协议相同)")])])]),v._v(" "),l("li",[l("p",[v._v("7.传输数据，更新状态")]),v._v(" "),l("ul",[l("li",[v._v("渲染文档准备好之后，浏览器向渲染进程发起“提交文档”的消息，渲染进程收到消息和网络进程建立传输数据的管道")]),v._v(" "),l("li",[v._v("渲染进程接受完数据之后，向浏览器进程发送“确认提交”")]),v._v(" "),l("li",[v._v("浏览器进程接受到确认消息后更新浏览器界面状态：安全、地址栏url、前进后退的历史状态、更新web界面。")])])])]),v._v(" "),l("p",[v._v("-8.构建DOM树与CSSOM树\n-浏览器在渲染页面前需要先构建出DOM树与CSSOM树\n-想要渲染出页面，就需要将DOM树与CSSOM树结合在一起，这就是渲染树\n-js:当浏览器的HTML解析器遇到一个script标记时会暂停构建DOM，然后将控制权移交至JavaScript引擎，这时引擎会开始执行JavaScript脚本，直到执行结束后，浏览器才会从之前中断的地方恢复，然后继续构建DOM。每次去执行JavaScript脚本都会严重地阻塞DOM树的构建，如果JavaScript脚本还操作了CSSOM，而正好这个CSSOM还没有下载和构建，浏览器甚至会延迟脚本执行和构建DOM，直至完成其CSSOM的下载和构建")])])}),[],!1,null,null,null);_.default=i.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{434:function(t,s,r){"use strict";r.r(s);var a=r(42),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"事件循环"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),r("p",[t._v("1、js是单线程语言 在处理异步的时候肯定要有等待， 浏览器可以很好的处理异步 原因是什么？")]),t._v(" "),r("p",[t._v("浏览器负责的工作包括：页面渲染（GUI 渲染线程（负责渲染页面，解析 HTML，CSS 构成 DOM 树）），脚本执行（js、 script），事件处理等(事件触发线程、定时器触发线程、http 请求线程等主要线程)")]),t._v(" "),r("h3",{attrs:{id:"线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[t._v("#")]),t._v(" 线程")]),t._v(" "),r("p",[t._v("主线程：也就是 js 引擎执行的线程，这个线程只有一个，页面渲染、函数处理都在这个主线程上执行。\n工作线程：也称幕后线程，这个线程可能存在于浏览器或js引擎内，与主线程是分开的，处理文件读取、网络请求等异步事件。")]),t._v(" "),r("p",[r("strong",[t._v("同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入任务队列。主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。 上述过程的不断重复就是我们说的 Event Loop (事件循环)。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);
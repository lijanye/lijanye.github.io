(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{580:function(a,e,t){"use strict";t.r(e);var r=t(42),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[a._v("#")]),a._v(" babel")]),a._v(" "),t("h3",{attrs:{id:"一、-babel-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、-babel-core"}},[a._v("#")]),a._v(" 一、@babel/core")]),a._v(" "),t("p",[a._v("Babel 的核心功能包含在 @babel/core 模块中。看到 core 这个词了吧，意味着核心，没有它，在 babel 的世界里注定寸步难行。不安装 @babel/core，无法使用 babel 进行编译。")]),a._v(" "),t("h3",{attrs:{id:"二、-babel-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、-babel-cli"}},[a._v("#")]),a._v(" 二、@babel/cli")]),a._v(" "),t("p",[a._v("babel 提供的命令行工具，主要是提供 babel 这个命令，适合安装在项目里。")]),a._v(" "),t("p",[a._v("@babel/node 提供了 babel-node 命令，但是 @babel/node 更适合全局安装，不适合安装在项目里。")]),a._v(" "),t("h3",{attrs:{id:"三、插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、插件"}},[a._v("#")]),a._v(" 三、插件")]),a._v(" "),t("p",[a._v("Babel 构建在插件之上，使用现有的或者自己编写的插件可以组成一个转换通道，Babel 的插件分为两种: 语法插件和转换插件。")]),a._v(" "),t("h4",{attrs:{id:"_1-语法插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-语法插件"}},[a._v("#")]),a._v(" 1.语法插件")]),a._v(" "),t("p",[a._v("这些插件只允许 Babel 解析（parse） 特定类型的语法（不是转换），可以在 AST 转换时使用，以支持解析新语法。")]),a._v(" "),t("h4",{attrs:{id:"_2-转换插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-转换插件"}},[a._v("#")]),a._v(" 2.转换插件")]),a._v(" "),t("p",[a._v("转换插件会启用相应的语法插件。")]),a._v(" "),t("h3",{attrs:{id:"四、预设"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、预设"}},[a._v("#")]),a._v(" 四、预设")]),a._v(" "),t("p",[a._v("如果想将其它的新的JS特性转换成低版本，需要使用其它对应的 plugin 。如果我们一个个配置的话，会非常繁琐，因为你可能需要配置几十个插件，这显然非常不便，那么有没有什么办法可以简化这个配置呢？")]),a._v(" "),t("p",[a._v("通过使用或创建一个 preset 即可轻松使用一组插件。")]),a._v(" "),t("h4",{attrs:{id:"官方提供"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#官方提供"}},[a._v("#")]),a._v(" 官方提供")]),a._v(" "),t("ul",[t("li",[a._v("@babel/preset-env")]),a._v(" "),t("li",[a._v("@babel/preset-flow")]),a._v(" "),t("li",[a._v("@babel/preset-react")]),a._v(" "),t("li",[a._v("@babel/preset-typescript")])]),a._v(" "),t("h3",{attrs:{id:"五、-babel-plugin-transform-runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、-babel-plugin-transform-runtime"}},[a._v("#")]),a._v(" 五、@babel/plugin-transform-runtime")]),a._v(" "),t("p",[a._v("@babel/plugin-transform-runtime 是一个可以重复使用 Babel 注入的帮助程序，以节省代码大小的插件。")]),a._v(" "),t("p",[a._v("另外，@babel/plugin-transform-runtime 需要和 @babel/runtime 配合使用。")]),a._v(" "),t("h3",{attrs:{id:"六、执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、执行顺序"}},[a._v("#")]),a._v(" 六、执行顺序")]),a._v(" "),t("ul",[t("li",[a._v("插件在 Presets 前运行")]),a._v(" "),t("li",[a._v("插件顺序从前往后排列")]),a._v(" "),t("li",[a._v("Preset 顺序是颠倒的（从后往前）")])])])}),[],!1,null,null,null);e.default=s.exports}}]);